{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","tpye","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAChCR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAId,SACI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SAjBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAWH,GAF9C,+DAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAebM,GAfa,4CAAH,sDCARO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,kCAAMA,EAAN,WCLCO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECAd,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAEGqB,EDlB2BK,CAAc1B,GAAlCa,EAHwB,EAG9BN,KAAca,EAHgB,EAGhBA,QAEtB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,uBAEb,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,aADgC,CAC/B,EAAD,eAGKA,GAFEA,EAAIC,aEd1BgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,cAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAS9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAaA,GADLA,Y,MChB5B6B,IAASC,OACP,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.704b0270.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2) {\r\n        setCategories( cats => [inputValue,...cats ] )\r\n        setInputValue('')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            < input\r\n                tpye = 'text'\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories:PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category) }&limit=10&api_key=CmsCGDUkmsZL2cHT6N4sQ9XH0UvXvj3v`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();       \r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            {/* { img.title }             */}\r\n            <img src = { url } alt = { title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category} ) => {\r\n \r\n\r\n    const { data: images ,loading } = useFetchGifs( category );\r\n   \r\n    return (  \r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'> { category } </h3>  \r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading..</p>}\r\n\r\n            <div className='card-grid'>\r\n\r\n                    {\r\n                        images.map( img => (                // cuando se usa el () en un map en vez de {}, se esta entregando un return implicito por lo q no se necesita poner return\r\n                            <GifGridItem \r\n                            key = {img.id}\r\n                            // img = {img}\r\n                            { ...img }\r\n                            />\r\n                        ))\r\n                    }\r\n            \r\n            </div>\r\n        </> \r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                    \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n               \r\n            });\r\n       \r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories( [...categories, 'HunterXHunter'] ) // alternativa 1 => los ... indcan a los elementos en\r\n    //     setCategories( cats => [...cats, 'HunterxHunter'] ) // alt 2\r\n    // }\r\n\r\n    return (\r\n      <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories = { setCategories }/>\r\n        <hr />\r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                    <GifGrid \r\n                    key = { category }\r\n                    category = { category } />\r\n                ))\r\n            }\r\n        </ol>\r\n\r\n      </>\r\n    );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\ndocument.getElementById('root')\n);"],"sourceRoot":""}